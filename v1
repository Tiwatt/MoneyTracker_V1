<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ExpenseTrack - บันทึกรายรับรายจ่าย</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            transition: background-color 0.3s, color 0.3s;
        }
        .dark-mode {
            background-color: #1a202c;
            color: #e2e8f0;
        }
        .dark-mode .bg-white {
            background-color: #2d3748;
            color: #e2e8f0;
        }
        .dark-mode .text-gray-600 {
            color: #cbd5e0;
        }
        .hover-pop {
            transition: transform 0.2s ease-in-out;
        }
        .hover-pop:hover {
            transform: scale(1.05);
        }
    </style>
</head>
<body class="bg-gray-100 font-sans">
    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <header class="bg-gradient-to-r from-blue-500 to-purple-600 text-white py-6 rounded-lg shadow-lg mb-8">
            <div class="flex justify-between items-center px-6">
                <h1 class="text-3xl font-bold tracking-wide">
                    <i class="fas fa-money-check-alt mr-3"></i>ExpenseTrack
                </h1>
                <div class="flex items-center space-x-4">
                    <button id="themeToggle" class="bg-white bg-opacity-20 hover:bg-opacity-30 p-2 rounded-full" title="สลับโหมด">
                        <i id="themeIcon" class="fas fa-moon"></i>
                    </button>
                    <button id="uploadData" class="bg-white bg-opacity-20 hover:bg-opacity-30 p-2 rounded-full" title="อัพโหลดไฟล์">
                        <i class="fas fa-upload"></i>
                    </button>
                    <input type="file" id="fileInput" class="hidden" accept=".csv,.xlsx">
                </div>
            </div>
        </header>

        <!-- Summary Cards -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow-md p-6 hover-pop">
                <h3 class="text-lg font-semibold text-gray-600 mb-2">
                    <i class="fas fa-arrow-up text-green-500 mr-2"></i>รายรับรวม
                </h3>
                <p id="totalIncome" class="text-3xl font-bold text-green-600">0</p>
            </div>
            <div class="bg-white rounded-lg shadow-md p-6 hover-pop">
                <h3 class="text-lg font-semibold text-gray-600 mb-2">
                    <i class="fas fa-arrow-down text-red-500 mr-2"></i>รายจ่ายรวม
                </h3>
                <p id="totalExpense" class="text-3xl font-bold text-red-600">0</p>
            </div>
            <div class="bg-white rounded-lg shadow-md p-6 hover-pop">
                <h3 class="text-lg font-semibold text-gray-600 mb-2">
                    <i class="fas fa-wallet text-blue-500 mr-2"></i>ยอดคงเหลือ
                </h3>
                <p id="netBalance" class="text-3xl font-bold text-blue-600">0</p>
            </div>
        </div>

        <!-- Expense Form -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
            <form id="expenseForm" class="grid grid-cols-1 md:grid-cols-5 gap-4">
                <input type="date" id="dateInput" class="border rounded p-2" required>
                <input type="text" id="descriptionInput" placeholder="รายการ" class="border rounded p-2" required>
                <input type="number" id="amountInput" placeholder="ยอดเงิน" class="border rounded p-2" required>
                <select id="typeInput" class="border rounded p-2" required>
                    <option value="income">รายรับ</option>
                    <option value="expense">รายจ่าย</option>
                </select>
                <button type="submit" class="bg-blue-500 text-white rounded p-2 hover:bg-blue-600">
                    <i class="fas fa-plus mr-2"></i>เพิ่มรายการ
                </button>
            </form>
        </div>

        <!-- Data Table -->
        <div class="bg-white rounded-lg shadow-md">
            <div class="flex justify-between items-center p-4 border-b">
                <h2 class="text-xl font-semibold">
                    <i class="fas fa-list-ul mr-2"></i>รายการทั้งหมด
                </h2>
                <div class="flex space-x-2">
                    <input type="date" id="startDateFilter" class="border rounded p-2">
                    <input type="date" id="endDateFilter" class="border rounded p-2">
                    <button id="filterBtn" class="bg-green-500 text-white rounded p-2 hover:bg-green-600">
                        <i class="fas fa-filter mr-2"></i>กรอง
                    </button>
                    <button id="exportBtn" class="bg-blue-500 text-white rounded p-2 hover:bg-blue-600">
                        <i class="fas fa-file-export mr-2"></i>Export CSV
                    </button>
                </div>
            </div>
            <div class="overflow-x-auto">
                <table id="dataTable" class="w-full">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="p-3 text-left">วันที่</th>
                            <th class="p-3 text-left">รายการ</th>
                            <th class="p-3 text-right">ยอดเงิน</th>
                            <th class="p-3 text-center">ประเภท</th>
                            <th class="p-3 text-center">การกระทำ</th>
                        </tr>
                    </thead>
                    <tbody id="dataBody"></tbody>
                </table>
            </div>
        </div>

        <!-- Charts -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-8">
            <div class="bg-white rounded-lg shadow-md p-6">
                <h3 class="text-xl font-semibold mb-4">
                    <i class="fas fa-chart-pie mr-2"></i>สัดส่วนรายจ่าย
                </h3>
                <canvas id="expensePieChart"></canvas>
                <div id="topExpenseCategory" class="mt-4 text-center">
                    <h4 class="font-semibold text-lg">หมวดที่ใช้จ่ายมากที่สุด</h4>
                    <p id="topCategoryText" class="text-xl text-red-600"></p>
                </div>
            </div>
            <div class="bg-white rounded-lg shadow-md p-6">
                <h3 class="text-xl font-semibold mb-4">
                    <i class="fas fa-chart-bar mr-2"></i>รายรับรายจ่ายรายเดือน
                </h3>
                <canvas id="monthlyChart"></canvas>
            </div>
        </div>
    </div>

    <script>
        class ExpenseTracker {
            constructor() {
                this.expenses = this.generateSampleData();
                localStorage.setItem('expenses', JSON.stringify(this.expenses));
                this.initEventListeners();
                this.renderTable();
                this.updateSummary();
                this.renderCharts();
                this.setupThemeToggle();
            }

            setupThemeToggle() {
                const themeToggle = document.getElementById('themeToggle');
                const themeIcon = document.getElementById('themeIcon');
                
                // Default dark mode off
                let isDarkMode = false;
                
                themeToggle.addEventListener('click', () => {
                    isDarkMode = !isDarkMode;
                    document.body.classList.toggle('dark-mode', isDarkMode);
                    
                    // Change icon based on mode
                    themeIcon.classList.toggle('fa-moon', !isDarkMode);
                    themeIcon.classList.toggle('fa-sun', isDarkMode);
                });
            }

            generateSampleData() {
                const categories = [
                    'อาหาร', 'ค่าเดินทาง', 'ที่พัก', 'ของใช้', 
                    'บันเทิง', 'การศึกษา', 'สุขภาพ', 'เสื้อผ้า'
                ];
                const sampleData = [];
                const startDate = new Date('2024-01-01');

                for (let month = 0; month < 3; month++) {
                    for (let i = 0; i < 15; i++) {
                        const date = new Date(startDate);
                        date.setMonth(startDate.getMonth() + month);
                        date.setDate(Math.floor(Math.random() * 28) + 1);

                        const isIncome = Math.random() > 0.7;
                        const amount = isIncome 
                            ? Math.floor(Math.random() * 5000) + 5000
                            : Math.floor(Math.random() * 3000) + 500;

                        sampleData.push({
                            date: date.toISOString().split('T')[0],
                            description: isIncome 
                                ? 'รายได้จาก' + ['เงินเดือน', 'freelance', 'โบนัส'][Math.floor(Math.random() * 3)]
                                : categories[Math.floor(Math.random() * categories.length)],
                            amount: amount,
                            type: isIncome ? 'income' : 'expense',
                            id: Date.now() + Math.random()
                        });
                    }
                }
                return sampleData;
            }

            // Rest of the methods remain the same as in the previous version
            initEventListeners() {
                document.getElementById('expenseForm').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.addExpense();
                });

                document.getElementById('filterBtn').addEventListener('click', () => this.filterData());
                document.getElementById('exportBtn').addEventListener('click', () => this.exportToCSV());
                
                document.getElementById('uploadData').addEventListener('click', () => {
                    document.getElementById('fileInput').click();
                });

                document.getElementById('fileInput').addEventListener('change', (e) => this.uploadFile(e));
            }

            addExpense() {
                const date = document.getElementById('dateInput').value;
                const description = document.getElementById('descriptionInput').value;
                const amount = parseFloat(document.getElementById('amountInput').value);
                const type = document.getElementById('typeInput').value;

                const expense = { date, description, amount, type, id: Date.now() };
                this.expenses.push(expense);
                this.saveExpenses();
                this.renderTable();
                this.updateSummary();
                this.renderCharts();
                this.resetForm();
            }

            saveExpenses() {
                localStorage.setItem('expenses', JSON.stringify(this.expenses));
            }

            renderTable() {
                const dataBody = document.getElementById('dataBody');
                dataBody.innerHTML = '';
                this.expenses.forEach(expense => {
                    const row = document.createElement('tr');
                    row.classList.add('border-b', 'hover:bg-gray-100');
                    row.innerHTML = `
                        <td class="p-3">${expense.date}</td>
                        <td class="p-3">${expense.description}</td>
                        <td class="p-3 text-right ${expense.type === 'income' ? 'text-green-600' : 'text-red-600'}">
                            ${expense.amount.toLocaleString()}
                        </td>
                        <td class="p-3 text-center">${expense.type === 'income' ? 'รายรับ' : 'รายจ่าย'}</td>
                        <td class="p-3 text-center">
                            <button onclick="tracker.editExpense(${expense.id})" class="text-blue-500 mr-2">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button onclick="tracker.deleteExpense(${expense.id})" class="text-red-500">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    `;
                    dataBody.appendChild(row);
                });
            }

            updateSummary() {
                const totalIncome = this.expenses
                    .filter(e => e.type === 'income')
                    .reduce((sum, e) => sum + e.amount, 0);
                
                const totalExpense = this.expenses
                    .filter(e => e.type === 'expense')
                    .reduce((sum, e) => sum + e.amount, 0);

                document.getElementById('totalIncome').textContent = totalIncome.toLocaleString();
                document.getElementById('totalExpense').textContent = totalExpense.toLocaleString();
                document.getElementById('netBalance').textContent = (totalIncome - totalExpense).toLocaleString();
            }

            renderCharts() {
                const expenseData = this.expenses.filter(e => e.type === 'expense');
                const groupedExpenses = expenseData.reduce((acc, curr) => {
                    acc[curr.description] = (acc[curr.description] || 0) + curr.amount;
                    return acc;
                }, {});

                const topCategory = Object.entries(groupedExpenses)
                    .reduce((a, b) => b[1] > a[1] ? b : a, ['', 0])[0];
                
                document.getElementById('topCategoryText').textContent = 
                    topCategory ? `${topCategory} (${groupedExpenses[topCategory].toLocaleString()} บาท)` : 'ไม่มีข้อมูล';

                // Pie Chart
                const ctx1 = document.getElementById('expensePieChart').getContext('2d');
                new Chart(ctx1, {
                    type: 'pie',
                    data: {
                        labels: Object.keys(groupedExpenses),
                        datasets: [{
                            data: Object.values(groupedExpenses),
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)',
                                'rgba(255, 206, 86, 0.6)', 'rgba(75, 192, 192, 0.6)',
                                'rgba(153, 102, 255, 0.6)', 'rgba(255, 159, 64, 0.6)'
                            ]
                        }]
                    }
                });

                // Monthly Chart
                const monthlyData = this.expenses.reduce((acc, curr) => {
                    const month = curr.date.slice(0, 7);
                    if (!acc[month]) acc[month] = { income: 0, expense: 0 };
                    curr.type === 'income' ? acc[month].income += curr.amount : acc[month].expense += curr.amount;
                    return acc;
                }, {});

                const ctx2 = document.getElementById('monthlyChart').getContext('2d');
                new Chart(ctx2, {
                    type: 'bar',
                    data: {
                        labels: Object.keys(monthlyData),
                        datasets: [
                            { 
                                label: 'รายรับ', 
                                data: Object.values(monthlyData).map(m => m.income), 
                                backgroundColor: 'rgba(75, 192, 192, 0.6)' 
                            },
                            { 
                                label: 'รายจ่าย', 
                                data: Object.values(monthlyData).map(m => m.expense), 
                                backgroundColor: 'rgba(255, 99, 132, 0.6)' 
                            }
                        ]
                    }
                });
            }

            // Other methods remain the same (editExpense, deleteExpense, etc.)
        }

        const tracker = new ExpenseTracker();
    </script>
</body>
</html>
